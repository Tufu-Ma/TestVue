const express = require("express");
const pool = require("../config/db");
const router = express.Router();
const jwt = require("jsonwebtoken");

// Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT Token
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return res.status(401).json({ message: "Unauthorized: No token provided" });
    }

    const token = authHeader.split(" ")[1];

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("üìå Decoded Token:", decoded); // ‚úÖ Log Payload

        req.user = { user_id: decoded.userId }; // ‚úÖ ‡πÉ‡∏ä‡πâ `userId` ‡∏à‡∏≤‡∏Å Token
        console.log("‚úÖ Token verified! User ID:", req.user.user_id);

        next();
    } catch (error) {
        console.error("‚ùå Invalid token:", error);
        return res.status(403).json({ message: "Forbidden: Invalid token" });
    }
};



// ‚úÖ API ‡πÄ‡∏ä‡∏¥‡∏ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏ö‡∏≠‡∏£‡πå‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
router.post("/boards/:board_id/invite", authenticateToken, async (req, res) => {
    console.log("üìå Received request at /boards/:board_id/invite");
    console.log("üìå Request Body:", req.body);
    console.log("üìå User ID from Token:", req.user.user_id); // user ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà

    const { board_id } = req.params;
    const { email, owner_id } = req.body;

    if (!email || !owner_id) {
        return res.status(400).json({ message: "Missing required fields: email or owner_id" });
    }

    try {
        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ owner_id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö user ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á request ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (Number(owner_id) !== Number(req.user.user_id)) {
            console.warn(`‚ö†Ô∏è owner_id (${owner_id}) ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö user_id (${req.user.user_id})`);
            return res.status(403).json({ message: "You do not have permission to invite users" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const ownerCheck = await pool.query("SELECT owner_id FROM boards WHERE board_id = $1", [board_id]);

        if (ownerCheck.rowCount === 0) {
            return res.status(404).json({ message: "Board not found" });
        }

        if (ownerCheck.rows[0].owner_id !== Number(owner_id)) {
            console.warn(`‚ö†Ô∏è User ${owner_id} is not the owner of board ${board_id}.`);
            return res.status(403).json({ message: "Only the board owner can invite users" });
        }

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user_id ‡∏à‡∏≤‡∏Å email
        const userResult = await pool.query("SELECT user_id FROM users WHERE email = $1", [email]);

        if (userResult.rowCount === 0) {
            return res.status(404).json({ message: "User not found" });
        }

        const user_id = userResult.rows[0].user_id;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const memberCheck = await pool.query("SELECT * FROM board_members WHERE board_id = $1 AND user_id = $2", [board_id, user_id]);

        if (memberCheck.rowCount > 0) {
            return res.status(409).json({ message: "User is already a member of this board" });
        }

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î
        await pool.query("INSERT INTO board_members (board_id, user_id) VALUES ($1, $2)", [board_id, user_id]);

        res.status(201).json({ message: "User invited successfully" });

    } catch (error) {
        console.error("‚ùå Invite Member Error:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

module.exports = router;

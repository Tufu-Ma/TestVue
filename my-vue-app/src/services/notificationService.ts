import axios, { AxiosError, AxiosResponse } from 'axios';

// üî• URL ‡∏Ç‡∏≠‡∏á API ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Backend)
const API_URL = 'http://localhost:5000/api/notifications';

// üî• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
export interface Notification {
  notification_id: number;  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å id ‚Üí notification_id
  user_id: number;
  task_id?: number | null;  // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null ‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ task
  board_id: number;
  message: string;
  is_read: boolean;
  created_at: string;
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Authentication
const getAuthHeaders = () => {
  const token = localStorage.getItem('token');
  return {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  };
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getNotifications = async (): Promise<Notification[]> => {
  try {
    const response: AxiosResponse<Notification[]> = await axios.get(API_URL, getAuthHeaders());
    return response.data;
  } catch (error) {
    console.error('‚ùå Error fetching notifications:', error);
    throw error;
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
export const getNotificationsByUser = async (userId: number): Promise<Notification[]> => {
  try {
    const response: AxiosResponse<Notification[]> = await axios.get(`${API_URL}/user/${userId}`, getAuthHeaders());
    return response.data;
  } catch (error) {
    console.error('‚ùå Error fetching notifications for user:', error);
    throw error;
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á Task ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
export const getNotificationsByTask = async (taskId: number): Promise<Notification[]> => {
  try {
    const response: AxiosResponse<Notification[]> = await axios.get(`${API_URL}/task/${taskId}`, getAuthHeaders());
    return response.data;
  } catch (error) {
    console.error('‚ùå Error fetching notifications for task:', error);
    throw error;
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á Board ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
export const getNotificationsByBoard = async (boardId: number): Promise<Notification[]> => {
  try {
    const response: AxiosResponse<Notification[]> = await axios.get(`${API_URL}/board/${boardId}`, getAuthHeaders());
    return response.data;
  } catch (error) {
    console.error('‚ùå Error fetching notifications for board:', error);
    throw error;
  }
};

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ID
export const getNotificationById = async (notificationId: number): Promise<Notification> => {
  try {
    const response: AxiosResponse<Notification> = await axios.get(`${API_URL}/${notificationId}`, getAuthHeaders());
    return response.data;
  } catch (error) {
    console.error('‚ùå Error fetching notification by id:', error);
    throw error;
  }
};

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Notification ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Assignee ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ)
export const createNotification = async (
  userId: number,
  taskId: number | null,
  boardId: number,
  message: string
): Promise<Notification> => {
  try {
    console.log("üì© Creating notification with data:", { userId, taskId, boardId, message });

    const response: AxiosResponse<Notification> = await axios.post(
      API_URL,
      { user_id: userId, task_id: taskId, board_id: boardId, message: message },
      getAuthHeaders()
    );

    console.log("‚úÖ Notification saved in database:", response.data);
    return response.data;
  } catch (error: unknown) {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ error ‡πÄ‡∏õ‡πá‡∏ô AxiosError ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (error instanceof AxiosError) {
      console.error("‚ùå AxiosError creating notification:", error.response?.data || error.message);
    } else {
      console.error("‚ùå Unknown error creating notification:", error);
    }
    throw error;
  }
};

// ‚úÖ ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
export const markAsRead = async (notificationId: number): Promise<Notification> => {
  try {
    const response: AxiosResponse<Notification> = await axios.put(
      `${API_URL}/${notificationId}/read`,
      {},
      getAuthHeaders()
    );
    return response.data;
  } catch (error) {
    console.error('‚ùå Error marking notification as read:', error);
    throw error;
  }
};

// ‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
export const deleteNotification = async (notificationId?: number): Promise<{ success: boolean; message: string }> => {
  if (!notificationId) {
    console.error("‚ùå Error: notificationId is undefined!");
    throw new Error("Invalid notification ID");
  }

  try {
    console.log(`üóëÔ∏è Deleting notification with ID: ${notificationId}`);
    const response: AxiosResponse<{ success: boolean; message: string }> = await axios.delete(
      `${API_URL}/${notificationId}`,
      getAuthHeaders()
    );

    console.log("‚úÖ Notification deleted:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error deleting notification:", error);
    throw error;
  }
};

